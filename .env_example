# API 提供商选择 (zhipuai, deepseek, gemini, openai)
API_PROVIDER=zhipuai
# 智谱AI配置
ZHIPUAI_API_KEY=your_zhipuai_api_key_here
ZHIPUAI_MODEL=glm-4v
# DeepSeek配置
DEEPSEEK_API_KEY=your_deepseek_api_key_here
DEEPSEEK_MODEL=deepseek-chat
# Google Gemini配置
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-pro-vision
# OpenAI配置
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4-vision-preview
# 代理设置（可选）
HTTPS_PROXY=your_proxy_here

# --- 提示词配置 ---
PERCEPTUAL_PROMPT="
Instruction
You are an expert in scientific visualization and draw.io (mxGraph XML) diagram design. Given a description or image of a scientific figure, your task is to deconstruct and reconstruct the visual structure using mxGraph XML format through a multi-stage analysis pipeline.
1. Gestalt Perception Analysis:
In the realm of Gestalt perception, analyze the graph by identifying the relationship between graphical elements and the background, recording proximity-based groupings, examining similarity patterns among visual components, and noting the continuity in connector elements as well as any applicable closure patterns. In addition, record the overall symmetry and balance of the composition.
2. Hierarchical Decomposition:
Decompose the graph hierarchically by identifying its primary visual objects and their boundaries, breaking complex objects into basic mxGraph shapes, and establishing parent-child relationships among the elements. This involves recognizing containment and spatial nesting relationships as well as recording the visual layering (z-order) of the components.
3. Visual Encoding Analysis:
Conduct a visual encoding analysis to discern how data variables are mapped to visual attributes; document the color encoding scheme and its corresponding meaning; analyze the encoding of size, position, and orientation; and recognize the significance of different line styles, thicknesses, and text attributes.
4. Connector Relationship Mapping:
Analyze connector relationships by identifying every connection element (such as arrows and lines), recording the source and target for each connection, examining routing patterns and bend points, noting the specific styles and arrowhead designs used (including their meanings), and recognizing any labeled connections along with the positioning of their associated text.
Examples:
Input: {Diagram DScientific} Answer: {Tpercept = (Tgestalt, Thierarchy, Tencoding, Tconnector)}
Output Format: A structured representation of the graph reconstruction task as a four-tuple of analysis components: (Tgestalt, Thierarchy, Tencoding, Tconnector)
▷ Tgestalt: perceptual grouping via Gestalt principles
▷ Thierarchy: decomposition into visual primitives and containment structure
▷ Tencoding: mapping of data variables to visual attributes
▷ Tconnector: analysis of element linkage and connector routing topology
"

SEMANTIC_PROMPT_TEMPLATE="
Instruction
Based on the prior perception analysis, you are now tasked with constructing a complete semantic specification of all mxGraph elements and their associated styles required to reconstruct the scientific figure in exact XML form. This specification must eliminate all ambiguity in graphical representation, ensuring faithful one-to-one correspondence between perception and rendering.
Step 1. Element and Shape Mapping:
Identify the required shape libraries from draw.io (e.g., basic, UML, BPMN), and determine whether any custom shapes must be defined. Each identified visual component should be mapped to its corresponding mxGraph primitive, and any shape modifications or overrides must be recorded in full.
Step 2. Style Definition and Custom Attributes:
For each element type, define its visual style attributes with precision. Assign exact color values in HEX or RGB; specify fill types such as solid, gradient, or pattern; and configure border and connector line styles including width, dash pattern, and color. Text attributes should be detailed, including font family, size, color, alignment, and shadow effects where relevant.
List any additional element-level attributes that may influence rendering or interaction, such as tooltips, conditional visibility, dynamic formatting, or metadata bindings. Include layer assignments for managing visual stacking or grouping semantics.
Step 3. Connector Specification:
For all connectors, specify routing type (e.g., straight, orthogonal, curved), arrowhead style and size, endpoint locations (including custom shape ports), and any routing constraints (such as fixed waypoints, edge snapping, or anchor preferences).
Examples:
Input: {Diagram DScientific + Tpercept} Answer: {Thierarchy = (Selement, Sstyle, Sconnector)}
Output Format: A structured three-tuple describing the full reconstruction plan for mxGraph rendering:
(Selement, Sstyle, Sconnector)
▷ Selement: mapped shapes and required libraries for all components
▷ Sstyle: detailed visual styles for each element class
▷ Sconnector: connector styles, endpoints, arrowheads, and routing logic
"

CODE_GENERATION_PROMPT_TEMPLATE="
Instruction
Based on the element specifications defined earlier, construct a complete base mxGraph XML document to replicate the scientific figure in draw.io. This implementation must conform precisely to the official XML schema used by draw.io, ensuring valid structure, correct style reference, and full compatibility with the latest version of the editor.
Step 1. Document Root and Structural Initialization:
Begin with the root <mxfile> element including appropriate namespace declarations and metadata. Create a <diagram> element with a unique id and human-readable name, followed by a well-formed <mxGraphModel> with attributes like dx, dy, grid, and gridSize. Within the model, ensure that the <root> contains an initial cell structure, including document-level configuration such as canvas bounds and page format settings.
Step 2. Style Definitions:
Define reusable visual styles via mxStylesheet. Implement all gradient fill settings, stroke colors, and border patterns for shape types. Configure connector styles including arrowheads, edge routing preferences (e.g., orthogonal, entity-relationship, or curved), and line styles. Specify text styles with font name, size, color, alignment, and other attributes like bold, italic, or shadow effects.
Step 3. Layering and Grouping Logic:
Define logical layers such as background, content, and annotation, setting their visibility, lock status, and z-index ordering. Within each layer, instantiate parent cells that represent structural groups, containers, or component modules as specified earlier. All shapes and connectors should be placed under the appropriate parent or layer node to preserve semantic organization.
Step 4. Coordinate System and Layout Configuration:
Set diagram origin, scale, and canvas boundaries. Define grid spacing, snapping alignment, and page layout. If applicable, configure ruler or guideline settings. Ensure that each graphical element is positioned with precise coordinate values relative to the canvas and scaling system.
Examples:
Input: {Diagram DScientific + Thierarchy} Answer: {(Ydoc, Ystyle, Ynode, Ylayout, Yedge)}
Output Format: A complete mxGraph XML structure expressed as a five-tuple: (Ydoc, Ystyle, Ynode, Ylayout, Yedge)
v Ydoc: root declarations (<mxfile>, <diagram>) with namespace and metadata
▷ Ystyle: visual style tokens for all elements (colors, borders, fonts, fill patterns)
▷ Ynode: diagram elements from E with unique IDs and geometry attributes
▷ Ylayout: layout constraints from L including alignment, nesting, layering
▷ Yedge: directed connectors with anchor points, routing strategies, and arrowhead metadata
"

REFINEMENT_PROMPT_TEMPLATE="
Instruction
You are an expert in scientific diagram synthesis and mxGraph XML generation for draw.io diagrams. Your role is to process an existing mxGraph XML snippet (which may contain formatting or semantic issues) and return a corrected and fully valid XML output that adheres to the draw.io schema.
Step 1: SYNTAX_CHECK
- Examine the XML code for syntax errors including missing/unclosed tags, improper nesting, or malformed attributes.
- Focus on the reported error location for malformed tags or invalid element names.
Step 2: SCHEMA_VALIDATION
- Confirm that the structural elements <mxfile>, <diagram>, <mxGraphModel>, and <root> exist and are properly nested.
- Verify compliance with the official draw.io schema.
Step 3: HIERARCHY_INTEGRITY
- Ensure nodes, edges, groups, and styles have correct parent-child relationships.
- Validate containment structure and identifier linkage integrity.
Step 4: CONNECTOR_AND_STYLE_CHECK
- Review all edges for valid source/target references and appropriate connector styles.
- Confirm that all style attributes (e.g., fillColor, strokeColor, fontSize) are well-formed and applied consistently.
Step 5: OUTPUT_QUALITY
- Output a corrected XML that is well-formed, semantically valid, and fully compatible with the draw.io editor.
- Ensure the final layout and style faithfully reproduce the intended diagram structure.
Do not return any comments, explanations, or intermediate results. Only output the final corrected mxGraph XML code.
"